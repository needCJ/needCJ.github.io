1.1.安装nodejs和npm

yum install epel-release -y
yum install nodejs npm -y

2.安装git
yum install git -y



3.安装hexo

npm install hexo-cli
npm install hexo



4.检查是否安装成功

[root@node1 ~]# npm list
root@ /root
├── hexo-cli@4.3.0
└── hexo@6.3.0


通过npm list可以看到hexo和hexo-cli的相关信息，说明安装成功

5.初始化网站
####  /usr/local/bin/node_modules/hexo/bin/hexo
hexo init myblob


网站名称myhexo，可自行定义，初始化成功后，会在当前目录生成myhexo的网站目录

cd myblob/
npm install



6.启动hexo

#hexo默认使用4000端口，启动前需通过防火墙放开4000端口
firewall-cmd --zone=public --add-port=4000/tcp --permanent
firewall-cmd --zone=public --add-port=4000/udp --permanent
firewall-cmd --reload

#### /usr/local/bin/node_modules/hexo/bin/hexo
hexo server


注意：hexo server命令必须在myhexo目录下才能执行。

7.访问hexo 浏览器访问：​ ​http://192.168.1.100:4000​​


注意：192.168.1.100是部署hexo的节点ip地址。



-----------  git部署  ------------------------------
1.npm install hexo-deployer-git --save

2.deploy:
  type: git
  repo: <repository url> # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io
  branch: [branch]
  message: [message]
  


3. hexo clean && hexo deploy


---------------------------------------   主题皮肤 --------------------------------
https://ppoffice.github.io/hexo-theme-icarus/uncategorized/icarus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/


https://ohevan.com/hexo-theme-redefine-intro.html

将theme代码放入themes文件夹下

1.npm install -S hexo-theme-icarus hexo-renderer-inferno

2. vi _config.yml

将 landscape 改为 icarus
theme: icarus
或者
hexo config theme icarus

3.hexo g

4.hexo server


------------------------------------增加置顶功能 ---------------------------------
1.找到node_modules/hexo-generator-index/lib/generator.js这个文件

##### 完整代码####################

'use strict';

const pagination = require('hexo-pagination');

module.exports = function(locals) {
  const config = this.config;
  const posts = locals.posts.sort(config.index_generator.order_by);
  posts.data = posts.data.sort(function(a, b) {
    if(a.top && b.top) { 
    // 两篇文章top都有定义
        if(a.top == b.top) return b.date - a.date;
         // 若top值一样则按照文章日期降序排
        else return  a.top - b.top ;
         // 否则按照top值升序排
    }
    else if(a.top && !b.top) { 
    // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）
        return -1;
    }
    else if(!a.top && b.top) {
        return 1;
    }
    else return b.date - a.date; // 都没定义按照文章日期降序排
});

 // posts.data.sort((a, b) => (b.sticky || 0) - (a.sticky || 0));

  const paginationDir = config.pagination_dir || 'page';
  const path = config.index_generator.path || '';

  return pagination(path, posts, {
    perPage: config.index_generator.per_page,
    layout: ['index', 'archive'],
    format: paginationDir + '/%d/',
    data: {
      __index: true
    }
  });
};


######################  archive 排序 ########################################
2.找到  /node_modules/hexo-generator-archive/lib/

const allPosts = locals.posts.sort(config.archive_generator.order_by || '-date');
  allPosts.data = allPosts.data.sort(function(a, b) {
    if(a.top && b.top) { 
    // 两篇文章top都有定义
        if(a.top == b.top) return b.date - a.date;
         // 若top值一样则按照文章日期降序排
        else return  a.top - b.top;
         // 否则按照top值升序排
    }
    else if(a.top && !b.top) { 
    // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）
        return -1;
    }
    else if(!a.top && b.top) {
        return 1;
    }
    else return b.date - a.date; // 都没定义按照文章日期降序排
  });



使用 ：
---
title: 文章名
date: 文章发布时间
tags: 文章标签
top: 100(文章置顶)
---

