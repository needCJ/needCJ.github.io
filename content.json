{"posts":[{"title":"Debezium","text":"背景对于一些大公司，每次到一定阶段都会面临数据积攒带来的架构上的瓶颈，到最后发现当前的数据库性能以及机器的硬件已经满足不了目前整体架构的需求。因此不得不考虑更换数据库，但是更换数据库就要面临一个新的挑战，那就是如何保证最高效以及最安全的数据迁移？这就是下面我要介绍的主角Debezium What is it?Debezium是国外一款开源的数据迁移框架，现已支持多种数据库: MySQL, MongoDB, PostgreSQL, Oracle, SQL Server, Db2, Cassandra, Vitess, Spanner， Jdbc。 这套框架最牛B的是支持准实时数据同步，其底层逻辑是读取数据库日志文件(比如redolog，binlog，或者伪装从库来发起同步请求 )。给你的感觉就好像在每一个表中加了触发器一样，自动将你insert，update，delete语句给抓出来。如果是大型公司出身的小伙伴应该都知道要想人家oracle官方人员来公司解决数据迁移这个case人家是要从出门就开始计费的！ Debezium架构图 通过这个架构图可以清晰的看见整个架构及中间件，其大体流程是Debezium读取数据库的log，拿到新进来的数据，然后整合kafka发送到topic中，下游进行消费。相信玩儿过大数据的朋友们对kafka都不会陌生，削峰填谷，大吞吐量。并且发送到kafka后下游消费者是多样性的，本人曾集成flink，对当日数据进行清洗后存入指定表做数据分析，以及再次分发给后端做用户行为分析。 本人在公司已带领团队成功完成 oracle to PostgreSQL ,单表10亿左右数据量的迁移任务。如果哪个小兄弟有相关业务可以联系我哦，QQ:1214818206。这次先抛个砖，等抽空会拿debezium的源码做分析，后续会在此blog中更新，溜了溜了","link":"/2023/09/07/debezium/"},{"title":"Hexo增加置顶功能","text":"默认的Hexo 排序是根据文章更新时间做倒序排序，但是我们有一些文章希望具有置顶功能，那么在不增加插件的前提下，就需要我们手动的去修改排序逻辑。本文只针对Home和Archive标签下的文章排序做定制处理，具体代码如下。 1. 找到node_modules/hexo-generator-index/lib/generator.js这个文件在 const pagination = require(‘hexo-pagination’); 后面添加如下代码 1234567891011121314151617181920212223 module.exports = function(locals) { const config = this.config; const posts = locals.posts.sort(config.index_generator.order_by); posts.data = posts.data.sort(function(a, b) { if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return a.top - b.top ; // 否则按照top值升序排 } else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if(!a.top &amp;&amp; b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 });// posts.data.sort((a, b) =&gt; (b.sticky || 0) - (a.sticky || 0)); 2. 找到 /node_modules/hexo-generator-archive/lib/generator.js 同样添加代码123456789101112131415const allPosts = locals.posts.sort(config.archive_generator.order_by || '-date');allPosts.data = allPosts.data.sort(function(a, b) { if(a.top &amp;&amp; b.top) { if(a.top == b.top) return b.date - a.date; else return a.top - b.top; } else if(a.top &amp;&amp; !b.top) { return -1; } else if(!a.top &amp;&amp; b.top) { return 1; } else return b.date - a.date;}); 3.重新编译 hexo clean &amp; g","link":"/2023/09/07/hexo_top/"},{"title":"KO","text":"INITIATORKAY/O is a machine of war built for a single purpose: neutralizing radiants. His power to suppress enemy abilities cripples his opponents’ capacity to fight back, securing him and his allies the ultimate edge. Q - FLASH/DRIVEEQUIP a flash grenade. FIRE to throw. The flash grenade explodes after a short fuse, blinding anyone in line of sight. E - ZERO/POINTEQUIP a suppression blade. FIRE to throw. The blade sticks to the first surface it hits, winds up, and suppresses anyone in the radius of the explosion. C - FRAG/MENTEQUIP an explosive fragment. FIRE to throw. The fragment sticks to the floor and explodes multiple times, dealing near lethal damage at the center with each explosion. X - NULL/CMDINSTANTLY overload with polarized radianite energy that empowers KAY/O and causes large energy pulses to emit from his location. Enemies hit with these pulses are suppressed for a short duration.","link":"/2023/09/07/ko/"},{"title":"Neon","text":"DUELISTFilipino Agent Neon surges forward at shocking speeds, discharging bursts of bioelectric radiance as fast as her body generates it.She races ahead to catch enemies off guard, then strikes them down quicker than lightning. Q - RELAY BOLTINSTANTLY throw an energy bolt that bounces once. Upon hitting each surface, the bolt electrifies the ground below with a concussive blast. E - HIGH GEARINSTANTLY channel Neon’s power for increased speed. When charged, ALT FIRE to trigger an electric slide. Slide charge resets every two kills. C - FAST LANEFIRE two energy lines forward on the ground that extend a short distance or until they hit a surface. The lines rise into walls of static electricity that block vision and damage enemies passing through them. X - OVERDRIVEUnleash Neon’s full power and speed for a short duration. FIRE to channel the power into a deadly lightning beam with high movement accuracy. The duration resets on each kill.","link":"/2023/09/07/neon/"}],"tags":[{"name":"Debezium","slug":"Debezium","link":"/tags/Debezium/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"top","slug":"top","link":"/tags/top/"},{"name":"valorant","slug":"valorant","link":"/tags/valorant/"},{"name":"ko","slug":"ko","link":"/tags/ko/"},{"name":"neon","slug":"neon","link":"/tags/neon/"}],"categories":[{"name":"Debezium","slug":"Debezium","link":"/categories/Debezium/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Valorant","slug":"Valorant","link":"/categories/Valorant/"},{"name":"tutorial","slug":"Debezium/tutorial","link":"/categories/Debezium/tutorial/"},{"name":"ko","slug":"Valorant/ko","link":"/categories/Valorant/ko/"},{"name":"neon","slug":"Valorant/neon","link":"/categories/Valorant/neon/"}],"pages":[{"title":"About me","text":"Need CJ の个人小站在这个blog中会不定时更新一些工作中使用到的技术栈,也会更新一些休息时游戏日常，如果哪位朋友想要搭建同款blog或者有项目想要合作的，可以联系我QQ:1214818206 自我介绍一下摘要大学报考时听信老一辈人说的 学个手艺有饭吃，于是乎报了个机械自动化专业。怎么说呢,多亏了是有自动化，要不然可能早下海了。(陈冠xi: 我那个时候19-20岁啊，所以我当然觉得我很帅呀)，当时明明可以靠颜值，结果还是走上了技术道路(ps:归根结底是贫穷限制了我胡作非为)。 工作履历 《一名自动化电气工程师的自我修养》毕业后第一份工作是去了深圳比亚迪，经历完苦B的3个月车间实习(名义上是下产线学习，实习工资都没有普工多，懂得都懂)，分到了什么电动卡车研发部门。就是在这个部门里让我知道了会技术和不会技术的差距。看着人家过来调试程序，我也跃跃欲试，于是又把大学学的那个《单片机编程》捡起来了，但是后来发现我们这个部门没有话语权，你写好的程序也不可能刷到车里测试，想换部门也不可能,再加上深圳和东北的气候差异，于是一不做二不休在经历了1年多的深飘之后，选择离职回到了老家，那个气候怡人的美丽的海滨城市–大连 《Java是世界上最好的语言》回来后考察当地的就业环境，发现并没有深圳那多种多样的就业岗位，我所学的这些东西根本用不上。于是凭借着那微不足道的编程功底，决定紧随时代的步伐转战Java,正式成为一名程序猿。结果这一干就是6年，从后端小白，到前后端双向发展，再到现在的微服务、大数据啥都能会一点。现在看到带的实习生和刚入行的初级工程师，让我想起了黎明的那句话: 其实我当年一般,现在呢也一般” 《深度学习》随着ChatGPT的爆火，这2年人工智能热度一下子也跟着火了起来，说起人工智能就不得不提到 深度学习，秉着逆水行舟，不进则退的原则，抽空也研究了一下(PS:顺便恶补了一下《高等数学》和《线性代数》)。我这里选择了Tensorflow作为模型的框架(主要原因是公司电脑能上google，而且google有个免费的笔记工具)，总结一下我的理解，就是把所有资源都张量化,可以理解为全部转换为多维矩阵，然后根据反向传播与梯度下降，随着输入增多(这一步也叫训练模型，也就是学习的过程)得到一些权重多维矩阵，使得输入资源的矩阵经过与权重矩阵运算后得到理想的输出矩阵或者向量，这些权重矩阵和运算方法就构成了所谓的 模型。我们有了模型后就可以直接将任何输入转化为我们理想的输出, 输出的矩阵可以转化为图片或者文字声音等任何资源(万物皆可张量)","link":"/about/index.html"}]}